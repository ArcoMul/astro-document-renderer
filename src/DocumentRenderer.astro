---
import type { AstroComponentFactory } from "astro/runtime/server/index.js";
import Layout from "./components/Layout.astro";
import Heading from "./components/Heading.astro";
import Paragraph from "./components/Paragraph.astro";
import List from "./components/List.astro";
import Relationship from "./components/Relationship.astro";

type Text = {
  text: string;
  [key: string]: unknown;
};

type Element = {
  children: Node[];
  [key: string]: unknown;
};

type Node = Element | Text;

interface Props {
  document: Node[];
  renderers?: {
    inline?: Partial<Renderers["inline"]>;
    block?: Partial<Renderers["block"]>;
  };
  componentBlocks?: any;
}

type Mark =
  | "bold"
  | "italic"
  | "underline"
  | "strikethrough"
  | "code"
  | "superscript"
  | "subscript"
  | "keyboard";

type OnlyChildrenComponent = AstroComponentFactory;

type MarkRenderers = { [Key in Mark]: OnlyChildrenComponent };

interface Renderers {
  inline: {
    link: AstroComponentFactory | "a";
    relationship: AstroComponentFactory | "span";
  } & MarkRenderers;
  block: {
    block: OnlyChildrenComponent;
    paragraph: AstroComponentFactory;
    blockquote: OnlyChildrenComponent;
    code: AstroComponentFactory;
    layout: AstroComponentFactory;
    divider: AstroComponentFactory;
    heading: AstroComponentFactory;
    list: AstroComponentFactory;
  };
}

const defaultRenderers = {
  inline: {
    bold: "strong",
    code: "code",
    keyboard: "kbd",
    strikethrough: "s",
    italic: "em",
    link: "a",
    subscript: "sub",
    superscript: "sup",
    underline: "u",
    relationship: Relationship,
  },
  block: {
    heading: Heading,
    layout: Layout,
    paragraph: Paragraph,
    list: List,
    code: "pre",
    divider: "hr",
  },
};

const {
  document,
  renderers: _renderers = { inline: {}, block: {} },
  componentBlocks,
} = Astro.props;

const renderers = {
  inline: { ...defaultRenderers.inline, ..._renderers.inline },
  block: { ...defaultRenderers.block, ..._renderers.block },
} as {
  inline: Partial<Renderers["inline"]>;
  block: Renderers["block"];
};
---

{
  document.map((node) => {
    if (node.text) {
      // Get text (replace softline breaks for html line break elements)
      let text = (node.text || "") as string;
      text = text.replace(/\n/g, "<br />");

      // Collection inline 'marks'
      let marks: OnlyChildrenComponent[] = [];
      (Object.keys(renderers.inline) as (keyof Renderers["inline"])[]).forEach(
        (markName) => {
          if (
            markName !== "link" &&
            markName !== "relationship" &&
            node[markName] &&
            renderers.inline[markName]
          ) {
            marks.push(renderers.inline[markName]);
          }
        }
      );

      // Render text wrapped in collected mark elements
      return (
        <>
          {marks.length > 0 ? (
            marks.reduce(
              (child, Mark) => <Mark>{child}</Mark>,
              <Fragment set:html={text} />
            )
          ) : (
            <Fragment set:html={text} />
          )}
        </>
      );
    } else if (node.type) {
      switch (node.type as string) {
        case "blockquote": {
          const Component = renderers.block.blockquote;
          return (
            <Component
              children={node.children as Element[]}
              documentRendererProps={{ componentBlocks, renderers }}
            />
          );
        }
        case "paragraph": {
          const Component = renderers.block.paragraph;
          return (
            <Component
              children={node.children as Element[]}
              documentRendererProps={{ componentBlocks, renderers }}
            />
          );
        }
        case "code": {
          const Component = renderers.block.code;
          // prettier-ignore
          return (
            <Component><Astro.self document={node.children as Node[]} renderers={renderers} /></Component>
          );
        }
        case "layout": {
          const Component = renderers.block.layout;
          return (
            <Component
              layout={node.layout as [number, ...number[]]}
              children={node.children as Element[]}
              documentRendererProps={{ componentBlocks, renderers }}
            />
          );
        }
        case "divider": {
          const Component = renderers.block.divider;
          return <Component />;
        }
        case "heading": {
          const Component = renderers.block.heading;
          return (
            <Component
              textAlign={node.textAlign as any}
              level={node.level}
              children={node.children as Element[]}
              documentRendererProps={{ componentBlocks, renderers }}
            />
          );
        }
        case "component-block": {
          const Component = componentBlocks[node.component as string];
          if (Component) {
            return (
              <Component
                {...(node.props as { [key: string]: any })}
                documentRendererProps={{ componentBlocks, renderers }}
                getDocument={(key: string) => {
                  if (!node.children) return null;
                  const child = (node.children as Node[]).find(
                    (child: Node) => (child.propPath as string[])[0] === key
                  );
                  if (child) {
                    return child.children;
                  }
                  return null;
                }}
              />
            );
          }
        }
        case "unordered-list":
        case "ordered-list": {
          const Component = renderers.block.list;
          return (
            <Component
              type={node.type === "ordered-list" ? "ordered" : "unordered"}
              children={node.children as Element[]}
              documentRendererProps={{ componentBlocks, renderers }}
            />
          );
        }
        case "relationship": {
          const Component =
            renderers.inline.relationship ||
            defaultRenderers.inline.relationship;
          const data = node.data as any;
          return (
            <Component
              relationship={node.relationship as string}
              data={
                data
                  ? { id: data.id, label: data.label, data: data.data }
                  : null
              }
            />
          );
        }
        case "link": {
          const Component =
            renderers.inline.link || defaultRenderers.inline.link;
          return (
            <Component href={node.href as string}>
              <Astro.self
                document={node.children as Node[]}
                renderers={renderers}
              />
            </Component>
          );
        }
        default: {
          if (node.children) {
            return (
              <Astro.self
                document={node.children as Node[]}
                renderers={renderers}
              />
            );
          }
        }
      }
    } else {
      console.error("Unknown node composition, no renderer found");
    }
  })
}
